<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta name="description" content="Create and save content for your digital signage with an intuitive builder.">
    <meta name="author" content="Your Name">
    <meta property="og:title" content="Digital Signage Content Builder">
    <meta property="og:description"
        content="Build and save content for digital signage with a simple drag-and-drop builder.">
    <meta property="og:image" content="/path/to/your-image.jpg">
    <meta property="og:url" content="http://yourwebsite.com">
    <title>Content Builder</title>
    <link rel="stylesheet" href="/styles.css">
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #f4f4f9;
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            display: flex;
            min-height: 100vh;
            overflow: hidden;
        }

        h1 {
            text-align: center;
            margin: 20px;
            color: #333;
        }

        #mainContainer {
            display: flex;
            flex: 1;
            overflow: hidden;
        }

        #sidebar {
            width: 250px;
            background-color: #ffffff;
            padding: 20px;
            box-shadow: 2px 0 5px rgba(0, 0, 0, 0.1);
            height: 100vh;
            overflow-y: auto;
            position: relative;
        }

        #generateKeyContainer {
            margin-bottom: 20px;
            text-align: center;
        }

        #generateKeyButton {
            padding: 10px 20px;
            background-color: #007bff;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            width: 100%;
            transition: background-color 0.3s ease;
        }

        #generateKeyButton:hover {
            background-color: #0056b3;
        }

        #screenKey {
            font-size: 18px;
            margin: 10px 0;
            font-weight: bold;
            color: green;
        }

        #canvasContainer {
            flex: 1;
            display: flex;
            justify-content: center;
            align-items: center;
            padding: 20px;
            overflow: auto;
        }

        #canvas {
            width: 100%;
            height: 600px;
            border: 2px solid #ccc;
            background-color: #f0f0f0;
        }

        #toolbar {
            display: flex;
            flex-direction: column;
            gap: 15px;
            position: sticky;
            top: 20px;
        }

        .widget {
            display: inline-block;
            padding: 15px;
            background-color: #eee;
            border-radius: 5px;
            cursor: pointer;
            width: 100%;
            text-align: center;
            font-weight: bold;
            transition: background-color 0.3s ease;
        }

        .widget:hover {
            background-color: #ddd;
        }

        button {
            padding: 10px 20px;
            background-color: #007bff;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            transition: background-color 0.3s ease;
            width: 100%;
        }

        button:hover {
            background-color: #0056b3;
        }

        #previewContainer {
            display: none;
            margin-top: 30px;
            text-align: center;
        }

        #previewContainer.visible {
            display: block;
        }

        /* Scroll responsiveness */
        @media (max-width: 1200px) {
            #mainContainer {
                flex-direction: column;
            }

            #sidebar {
                width: 100%;
                box-shadow: none;
            }

            #canvasContainer {
                margin-top: 20px;
            }
        }
    </style>
</head>

<body>


    <div id="mainContainer">
        <!-- Sidebar with widgets -->
        <div id="sidebar">
            <div id="generateKeyContainer">
                <button id="generateKeyButton">Generate Screen Key</button>
                <p id="screenKey"></p>
            </div>
            <div id="toolbar">
                <div class="widget" id="addHeader">Header</div>
                <div class="widget" id="addSlider">Slider</div>
                <div class="widget" id="addDateTime">Time/Date</div>
                <div class="widget" id="addIframe">Iframe</div>
                <div class="widget" id="addImage">Image</div>
                <input type="file" id="imageInput" style="display:none" accept="image/*">
                <img id="previewImage" style="display:none;" width="200" height="200">

                <div class="widget" id="addText">Text</div>
                <div class="widget" id="addSquare">Square</div>
                <div class="widget" id="addRectangle">Rectangle</div>
                <div class="widget" id="addCircle">Circle</div>
                <div class="widget" id="addTriangle">Triangle</div>
                <button id="saveContent">Sync Content</button>
                <button id="previewContent">Preview Content</button>
            </div>
        </div>

        <!-- Canvas container in the center -->
        <div id="canvasContainer">
            <canvas id="canvas" width="800" height="500"></canvas>
        </div>
    </div>

    <!-- Preview Container -->
    <div id="previewContainer">
        <h2>Content Preview</h2>
        <div id="previewCanvasContainer">
            <canvas id="previewCanvas" width="800" height="600"></canvas>
        </div>
    </div>


    <script src="https://cdnjs.cloudflare.com/ajax/libs/fabric.js/5.2.4/fabric.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        let screenKey = null;
        // Initialize Fabric.js canvas
        const canvas = new fabric.Canvas('canvas', {
            selection: true, // Allow multiple selections for better manipulation
            backgroundColor: '#f0f0f0', // Set background color for the canvas
        });

        // Function to generate a unique screen key
        function generateScreenKey() {
            return Math.random().toString(36).substring(2, 10).toUpperCase();
        }

        // Elements
        const generateKeyButton = document.getElementById('generateKeyButton');
        const screenKeyElement = document.getElementById('screenKey');
        const canvasContainer = document.getElementById('canvasContainer');
        const toolBar = document.getElementById('toolbar');


        // Get the elements
        const addImageButton = document.getElementById('addImage');
        const imageInput = document.getElementById('imageInput');
        const previewImage = document.getElementById('previewImage');

        screenKey = screenKey; // Example screenKey

        // Generate Screen Key
        generateKeyButton.addEventListener('click', () => {
            screenKey = Math.random().toString(36).substr(2, 8); // Generate an 8-character random key
            screenKeyElement.textContent = `Generated Screen Key: ${screenKey}`;
            // canvasContainer.style.display = 'block'; // Show canvas section

        });
        const previewButton = document.getElementById('previewButton');
        const socket = new WebSocket('ws://localhost:8081'); // Connect to WebSocket server on port 8080
        socket.onopen = () => {
            console.log('Connected to WebSocket server!');
            // Send saveCanvas data once connected

            const canvasData = JSON.stringify(canvas.toJSON());// Example canvasData

            socket.send(JSON.stringify({
                action: 'saveCanvas',
                screenKey,
                canvasData
            }));
        };

        socket.onmessage = (event) => {
            const data = JSON.parse(event.data);
            console.log('Received from backend:', data);
            if (data.status === 'success') {
                alert('Canvas saved successfully!');
            } else {
                alert('Error saving canvas: ' + data.message);
            }
        };

        socket.onerror = (error) => {
            console.error('WebSocket Error:', error);
        };

        socket.onclose = () => {
            console.log('Disconnected from WebSocket server');
        };



        // Widget Sizes
        const widgetSizes = {
            header: { width: 300, height: 50 },
            slider: { width: 400, height: 50 },

            datetime: { width: 250, height: 50 },
            iframe: { width: 250, height: 150 },
            image: { width: 150, height: 150 },
            text: { width: 300, height: 100 },
            square: { size: 100 },
            rectangle: { width: 200, height: 100 },
            circle: { radius: 75 },
            triangle: { width: 100, height: 100 },

        };

        // Function to add widgets to the canvas
        function addWidget(type) {
            let widget;

            switch (type) {
                case 'header':
                    widget = new fabric.Textbox('Header Text', {
                        left: 50,
                        top: 50,
                        fontSize: 24,
                        fill: 'black',
                        width: widgetSizes.header.width,
                        height: widgetSizes.header.height,
                        hasControls: true,
                        lockRotation: true,
                    });
                    break;
                case 'slider':
                    widget = new fabric.Rect({
                        left: 50,
                        top: 50,
                        width: widgetSizes.slider.width,
                        height: widgetSizes.slider.height,
                        fill: '#ccc',
                        hasControls: true,
                        lockRotation: true,
                    });
                    break;
                    // case 'weather':
                    widget = new fabric.Textbox('Weather Widget', {
                        left: 50,
                        top: 50,
                        fontSize: 18,
                        fill: 'blue',
                        width: widgetSizes.weather.width,
                        height: widgetSizes.weather.height,
                        hasControls: true,
                        lockRotation: true,
                    });
                    break;
                case 'datetime':
                    widget = new fabric.Textbox(new Date().toLocaleString(), {
                        left: 50,
                        top: 50,
                        fontSize: 18,
                        fill: 'green',
                        width: widgetSizes.datetime.width,
                        height: widgetSizes.datetime.height,
                        hasControls: true,
                        lockRotation: true,
                    });
                    break;
                case 'iframe':
                    widget = new fabric.Rect({
                        left: 50,
                        top: 50,
                        width: widgetSizes.iframe.width,
                        height: widgetSizes.iframe.height,
                        fill: 'lightgrey',
                        hasControls: true,
                        lockRotation: true,
                    });
                    break;
                case 'image':
                    addImage.addEventListener('click', () => {
                        imageInput.click();
                    });

                    // Handle the image input and add it to the canvas
                    imageInput.addEventListener('change', (event) => {
                        const file = event.target.files[0];
                        if (file) {
                            const reader = new FileReader();
                            reader.onload = function (e) {
                                // Use Fabric.js to load the image
                                fabric.Image.fromURL(e.target.result, function (img) {
                                    // Scale the image to fit within the canvas while maintaining aspect ratio
                                    const canvasWidth = canvas.getWidth();
                                    const canvasHeight = canvas.getHeight();

                                    // Get the original dimensions of the image
                                    const imgWidth = img.width;
                                    const imgHeight = img.height;

                                    // Calculate the scaling factor to fit the image inside the canvas
                                    const scaleFactor = Math.min(
                                        canvasWidth / imgWidth,
                                        canvasHeight / imgHeight
                                    );

                                    // Apply the scaling factor
                                    img.set({
                                        left: (canvasWidth - imgWidth * scaleFactor) / 2, // Center horizontally
                                        top: (canvasHeight - imgHeight * scaleFactor) / 2, // Center vertically
                                        scaleX: scaleFactor,
                                        scaleY: scaleFactor,
                                        hasControls: true,
                                        lockRotation: true, // Disable rotation
                                    });

                                    canvas.add(img);
                                    canvas.setActiveObject(img); // Set the image as the active object
                                });
                            };
                            reader.readAsDataURL(file);

                            // Reset the file input to allow the same image to be uploaded again if needed
                            event.target.value = '';
                        }
                    });
                    // Add a keydown event listener to delete all widgets when 'Delete' is pressed
                    document.addEventListener('keydown', (event) => {
                        if (event.key === 'Delete') {
                            // Clear all objects from the canvas
                            canvas.clear();
                        }
                    });
                    return;

                case 'text':
                    widget = new fabric.Textbox('Editable Text', {
                        left: 50,
                        top: 50,
                        fontSize: 24,
                        fill: 'black',
                        width: widgetSizes.text.width,
                        height: widgetSizes.text.height,
                        hasControls: true,
                        lockRotation: true,
                    });
                    break;
                case 'square':
                    widget = new fabric.Rect({
                        left: 50,
                        top: 50,
                        width: widgetSizes.square.size,
                        height: widgetSizes.square.size,
                        fill: 'red',
                        hasControls: true,
                        lockRotation: true,
                    });
                    break;
                case 'rectangle':
                    widget = new fabric.Rect({
                        left: 50,
                        top: 50,
                        width: widgetSizes.rectangle.width,
                        height: widgetSizes.rectangle.height,
                        fill: 'blue',
                        hasControls: true,
                        lockRotation: true,
                    });
                    break;
                case 'circle':
                    widget = new fabric.Circle({
                        left: 50,
                        top: 50,
                        radius: widgetSizes.circle.radius,
                        fill: 'green',
                        hasControls: true,
                        lockRotation: true,
                    });
                    break;
                case 'triangle':
                    widget = new fabric.Triangle({
                        left: 50,
                        top: 50,
                        width: widgetSizes.triangle.width,
                        height: widgetSizes.triangle.height,
                        fill: 'yellow',
                        hasControls: true,
                        lockRotation: true,
                    });
                    break;
                    // case 'arrow':
                    widget = new fabric.Polyline([
                        { x: 0, y: 0 },
                        { x: widgetSizes.arrow.width, y: widgetSizes.arrow.height },
                        { x: 0, y: widgetSizes.arrow.height },
                    ], {
                        fill: 'black',
                        stroke: 'black',
                        strokeWidth: 2,
                        hasControls: true,
                        lockRotation: true,
                    });
                    break;
                    // case 'gif':
                    fabric.Image.fromURL('https://media.giphy.com/media/3o7btPCvPOirv2fq7u/giphy.gif', function (img) {
                        img.set({
                            left: 50,
                            top: 50,
                            width: widgetSizes.gif.width,
                            height: widgetSizes.gif.height,
                            hasControls: true,
                            lockRotation: true,
                        });
                        canvas.add(img);
                    });
                    return;
                    // case 'chart':
                    const chartElement = document.createElement('canvas');
                    chartElement.width = widgetSizes.chart.width;
                    chartElement.height = widgetSizes.chart.height;
                    const chart = new Chart(chartElement, {
                        type: 'bar',
                        data: {
                            labels: ['Red', 'Blue', 'Yellow', 'Green', 'Purple', 'Orange'],
                            datasets: [{
                                label: 'Votes',
                                data: [12, 19, 3, 5, 2, 3],
                                backgroundColor: 'rgba(255, 99, 132, 0.2)',
                                borderColor: 'rgba(255, 99, 132, 1)',
                                borderWidth: 1,
                            }],
                        },
                        options: {
                            scales: {
                                y: {
                                    beginAtZero: true,
                                },
                            },
                        },
                    });
                    const chartImage = new fabric.Image(chartElement, {
                        left: 50,
                        top: 50,
                        width: widgetSizes.chart.width,
                        height: widgetSizes.chart.height,
                        hasControls: true,
                        lockRotation: true,
                    });
                    canvas.add(chartImage);
                    return;


            }

            // Add widget to canvas
            canvas.add(widget);
            canvas.setActiveObject(widget);
            updatePreview();
        }


        function updatePreview() {
            const previewCanvas = new fabric.Canvas('previewCanvas');
            const jsonData = canvas.toJSON();
            previewCanvas.loadFromJSON(jsonData, function () {
                previewCanvas.renderAll();
            });
        }
        // Add Event Listeners for draggable widgets
        document.getElementById('addHeader').addEventListener('click', () => addWidget('header'));
        document.getElementById('addSlider').addEventListener('click', () => addWidget('slider'));

        document.getElementById('addDateTime').addEventListener('click', () => addWidget('datetime'));
        document.getElementById('addIframe').addEventListener('click', () => addWidget('iframe'));
        document.getElementById('addImage').addEventListener('click', () => addWidget('image'));
        document.getElementById('addText').addEventListener('click', () => addWidget('text'));
        document.getElementById('addSquare').addEventListener('click', () => addWidget('square'));
        document.getElementById('addRectangle').addEventListener('click', () => addWidget('rectangle'));
        document.getElementById('addCircle').addEventListener('click', () => addWidget('circle'));
        document.getElementById('addTriangle').addEventListener('click', () => addWidget('triangle'));




        // // Save content when "Save Content" button is clicked
        // document.getElementById('saveContent').addEventListener('click', () => {
        //     try {
        //         // Ensure the canvas object exists and is not null
        //         if (!canvas) {
        //             throw new Error('Canvas not initialized.');
        //         }

        //         const canvasData = JSON.stringify(canvas.toJSON());

        //         // Check if screenKey exists
        //         if (!screenKey) {
        //             alert('Please generate a screen key before saving.');
        //             return;
        //         }

        //         // Send data to the server
        //         socket.send(
        //             JSON.stringify({
        //                 action: 'saveCanvas',
        //                 screenKey,
        //                 canvasData,
        //             })
        //         );

        //         // Notify the user that content has been saved
        //         alert('Content has been saved successfully!');

        //     } catch (error) {
        //         // Handle any errors that occur during the save process
        //         console.error('Error saving canvas content:', error);
        //         alert('An error occurred while saving the content. Please try again.');
        //     }
        // });


        document.getElementById('saveContent').addEventListener('click', () => {
            const canvasData = JSON.stringify(canvas.toJSON());
            if (!screenKey) {
                alert('Please generate a screen key before saving.');
                return;
            }
            socket.send(
                JSON.stringify({
                    action: 'saveCanvas',
                    screenKey,
                    canvasData,
                })
            );
        });


        // Handle saving content
        // document.getElementById('saveContent').addEventListener('click', () => {
        //     console.log('Save Content Button Clicked');
        //     console.log('Screen Key:', screenKey);

        //     if (!screenKey) {
        //         alert('Please generate a screen key before saving.');
        //         return;
        //     }

        //     try {
        //         const canvasData = JSON.stringify(canvas.toJSON());
        //         console.log('Canvas Data:', canvasData);

        //         const requestData = { screenKey, canvasData };

        //         fetch('http://localhost:3000/api/saveCanvas', {
        //             method: 'POST',
        //             headers: {
        //                 'Content-Type': 'application/json',
        //             },
        //             body: JSON.stringify(requestData),
        //         })
        //             .then((response) => {
        //                 console.log('Response Status:', response.status);
        //                 if (!response.ok) {
        //                     throw new Error(`HTTP error! status: ${response.status}`);
        //                 }
        //                 return response.json();
        //             })
        //             .then((data) => {
        //                 console.log('Response Data:', data);
        //                 if (data.error) {
        //                     alert(`Error saving canvas: ${data.error}`);
        //                 } else {
        //                     alert('Canvas saved successfully!');
        //                 }
        //             })
        //             .catch((error) => {
        //                 console.error('Error during fetch:', error);
        //                 alert('An error occurred while saving the canvas. Please try again.');
        //             });
        //     } catch (error) {
        //         console.error('Unexpected error:', error);
        //         alert('An unexpected error occurred.');
        //     }
        // });

        // Function to retrieve canvas content
        function loadCanvas(screenKey) {
            const canvasData = localStorage.getItem(screenKey);
            if (canvasData) {
                canvas.loadFromJSON(canvasData, canvas.renderAll.bind(canvas));
                alert('Canvas loaded successfully!');
            } else {
                alert('No canvas found for the provided Screen Key.');
            }
        }

        // Preview functionality
        document.getElementById('previewContent').addEventListener('click', function () {
            const previewWindow = window.open('', '_blank', 'width=800,height=600');
            // Add content to the popup window
            previewWindow.document.write(`
        <html>
        <head>
            <title>Preview</title>
            <style>
                body {
                    margin: 0;
                    padding: 0;
                    display: flex;
                    justify-content: center;
                    align-items: center;
                    height: 100vh;
                    background-color: #f4f4f4;
                }
                canvas {
                    border: 1px solid #ccc;
                }
            </style>
        </head>
        <body>
            <canvas id="previewCanvas" width="750" height="500"></canvas>
        </body>
        </html>
    `);

            // Wait for the new window to finish loading, then render the content
            previewWindow.document.close(); // Close the document stream to allow JavaScript execution

            previewWindow.onload = function () {
                const previewCanvas = new fabric.Canvas(previewWindow.document.getElementById('previewCanvas'));
                const jsonData = canvas.toJSON(); // Assuming `canvas` is the existing canvas object on your page
                previewCanvas.loadFromJSON(jsonData, function () {
                    previewCanvas.renderAll();
                });
            };
        });


    </script>
</body>

</html>